"""
This is an autogenerated template: {{ module_name }}
{{ timestamp }}

created using:
    {{ command_used }}

Dispatch usage:
```Python
from  {{ registry_module }} import {{ registry_class }}

request = {{ class_name }}{{ class_suffix }}Request()
response = await {{ registry_class }}.dispatch(request)
```
"""
from pydiatr.handler import (
    AbstractHandler,
    AbstractRequest,
    AbstractResponse
)
from  {{ registry_module }} import {{ registry_class }}


class {{ class_name }}{{ class_suffix }}Request(AbstractRequest):
    # add properties here just like a pydantic BaseModel
    # e.g. name: str
    pass


class {{ class_name }}{{ class_suffix }}Response(AbstractResponse):
    # add properties here just like a pydantic BaseModel
    # e.g. message: str
    pass


@{{ registry_class }}.decorate_handler
class {{ class_name }}{{ class_suffix }}Handler(AbstractHandler[{{ class_name }}{{ class_suffix }}Request, {{ class_name }}{{ class_suffix }}Response]):
    async def handle(self, request: {{ class_name }}{{ class_suffix }}Request) -> {{ class_name }}{{ class_suffix }}Response:
        # Implement your handler logic here
        # You can also add arguments to this method and pass them through
        # the registry dispatch method
        return {{ class_name }}{{ class_suffix }}Response()
